= giternal

There are a couple tools out there that keep track of git externals
for you.  Git submodules are built in, and braid is a different
project.  They both have problems that prevent them from using those
externals collaboratively.

In a nutshell, git submodules keep a reference to the head of each
external project.  This means that if Joe and Sarah each make
non-conflicting changes to their externals, and push the external
reference in the main project, one of them will get a conflict on
update.  Braid doesn't treat the externals as being separate from the
main project, so any commits you make will go to the parent instead of
the external.

In order to demonstrate these issues more concretely, I've written a
script that will simulate the workflow of making changes to an
external, pushing it upstream, and pulling it into another project.
You'll notice in the submodule example that there's a conflict when
updating the main repo, and files are missing in the local external
after update.  In the braid example, the changes never make it
upstream.  This script checks to see if a tool allows you to not only
track dependencies but collaborate as well.  To execute it, run

ruby test_trackers.rb giternal|submodules|braid

Put a file in your project named .giternal.yml or config/giternal.yml,
that looks like this:

rspec:
  repo: git://github.com/dchelimsky/rspec.git
  path: vendor/plugins

To pull the externals into your workspace, run "giternal update".  You
should add vendor/plugins/rspec to .gitignore to keep the files from
being added to your main repo.

== Copyright

Copyright (c) 2009 Pat Maddox. See LICENSE for details.
